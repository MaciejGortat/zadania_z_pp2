Napisz program, który dla trzech zmiennych dowolnego typu pobiera ich adresy i zapisuje do zmiennych wskaźnikowych tego samego typu.
Użyj zmiennych wskaźnikowych do modyfikacji zawartości każdej ze zmiennych.

// 1_1.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "stdlib.h"


int main()
{
	int a = 0, b = 0, c = 0;
	int *d, *e, *f;
	d = &a;
	e = &b;
	f = &c;
	*d = 1;
	*e = 2;
	*f = 3;
	system("PAUSE");
    return 0;
}

Napisz program który dla tablicy int T[10]
wypełnia ją wartościami od 0 do 9. Do wypełniania
używaj zmiennej wskaźnikowej (nie nazwy T).

// 1_2.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "stdlib.h"

int main()
{
	int T[10];
	int *a = T;
	for (int i = 0; i < 10; ++i) {
		*(a + i) = i;
	}
	system("PAUSE");
    return 0;
}

Utwórz tablicę T typu double o długości >= 100. Przypisz do niej dowolne wartości (random.org)
a nastepnie wyznacz sumę oraz wartość średnią. Nie używaj odwołania tablicowego (T[xx]).

// 1_3.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "stdlib.h"
#include "time.h"

int main()
{
	double T[100];
	double sum = 0, average;
	srand(time(NULL));
	for (int i = 0; i < 100; ++i) {
		*(T + i) = (float)rand() / (float)(RAND_MAX) + rand();
		printf("%lf\n", *(T + i));
	}
	for (int i = 0; i < 100; ++i) {
		sum += *(T + i);
	}
	average = sum / 100;
	printf("\nSuma: %lf \nSrednia: %lf\n", sum, average);
	system("PAUSE>nul");
    return 0;
}

Na podstawie zad "Wypełnianie tablicy 2" napisz program, który zawiera funkcje do liczenia średniej oraz sumy elementów w tablicy.
Prototyp funkcji powinien przewidywać dwa parametry: wskaźnik typu float oraz liczbę elementów.
Przetestuj na poniższym bloku danych: 
0.81472369 0.90579194 0.12698682 0.91337586 0.63235925 0.09754040 0.27849822 0.54688152 0.95750684 0.96488854 0.15761308 0.97059278 0.95716695 0.48537565 0.80028047 0.14188634 0.42176128 0.91573553 0.79220733 0.95949243 0.65574070 0.03571168 0.84912931 0.93399325 0.67873515 0.75774013 0.74313247 0.39222702 0.65547789 0.17118669 0.70604609 0.03183285 0.27692298 0.04617139 0.09713178 0.82345783 0.69482862 0.31709948 0.95022205 0.03444608 0.43874436 0.38155846 0.76551679 0.79519990 0.18687260 0.48976440 0.44558620 0.64631301 0.70936483 0.75468668 0.27602508 0.67970268 0.65509800 0.16261174 0.11899768 0.49836405 0.95974396 0.34038573 0.58526775 0.22381194 0.75126706 0.25509512 0.50595705 0.69907672 0.89090325 0.95929143 0.54721553 0.13862444 0.14929401 0.25750825 0.84071726 0.25428218 0.81428483 0.24352497 0.92926362 0.34998377 0.19659525 0.25108386 0.61604468 0.47328885 0.35165951 0.83082863 0.58526409 0.54972361 0.91719366 0.28583902 0.75720023 0.75372909 0.38044585 0.56782164 0.07585429 0.05395012 0.53079755 0.77916723 0.93401068 0.12990621 0.56882366 0.46939064 0.01190207 0.33712264

Wyniki: Suma=52.7994, w.średnia=0.5280

// 1_4.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "stdlib.h"


double sum(double *T, int size) {
	double sum = 0;
	for (int i = 0; i < size; ++i) {
		sum += *(T + i);
	}
	return sum;
}
double average(double *T, int size) {
	return sum(T, size) / size;
}
int main()
{
	double T[] = { 0.81472369, 0.90579194, 0.12698682, 0.91337586, 0.63235925, 0.09754040, 0.27849822, 0.54688152, 0.95750684, 0.96488854, 0.15761308, 0.97059278, 0.95716695, 0.48537565, 0.80028047, 0.14188634, 0.42176128, 0.91573553, 0.79220733, 0.95949243, 0.65574070, 0.03571168, 0.84912931, 0.93399325, 0.67873515, 0.75774013, 0.74313247 ,0.39222702 ,0.65547789 ,0.17118669 ,0.70604609 ,0.03183285 ,0.27692298 ,0.04617139 ,0.09713178 ,0.82345783 ,0.69482862 ,0.31709948 ,0.95022205 ,0.03444608 ,0.43874436 ,0.38155846 ,0.76551679 ,0.79519990 ,0.18687260 ,0.48976440 ,0.44558620 ,0.64631301 ,0.70936483 ,0.75468668 ,0.27602508 ,0.67970268 ,0.65509800 ,0.16261174 ,0.11899768 ,0.49836405 ,0.95974396 ,0.34038573 ,0.58526775 ,0.22381194 ,0.75126706 ,0.25509512 ,0.50595705 ,0.69907672 ,0.89090325 ,0.95929143 ,0.54721553 ,0.13862444 ,0.14929401 ,0.25750825 ,0.84071726 ,0.25428218 ,0.81428483 ,0.24352497 ,0.92926362 ,0.34998377 ,0.19659525 ,0.25108386 ,0.61604468 ,0.47328885 ,0.35165951 ,0.83082863 ,0.58526409 ,0.54972361 ,0.91719366 ,0.28583902 ,0.75720023 ,0.75372909 ,0.38044585 ,0.56782164 ,0.07585429 ,0.05395012 ,0.53079755 ,0.77916723 ,0.93401068 ,0.12990621 ,0.56882366 ,0.46939064 ,0.01190207 ,0.33712264 };
	int size = (int)(sizeof(T) / sizeof(double));
	printf("Suma: %lf \nSrednia: %lf\n", sum(T, size), average(T, size));
	system("PAUSE>nul");
	return 0;
}

Napisz program, który wyświetli pamięć tablicy {16909060, 84281096, 151653132} w postaci wartości kolejnych bajtów.
Ile będzie bajtów? Jakie będą ich wartości? (wymagana odpowiedź słowna)

// 1_5.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "stdlib.h"

int main()
{
	int tab[] = { 16909060, 84281096, 151653132 };
	char *a = (char*)tab;
	for (int i = 0; i < sizeof(tab); ++i) {
		printf("Bajt: %d Wartosc: %d\n" , i + 1 , *(a+i));
	}
	system("PAUSE>nul");
    return 0;
}

Napisz program, który przeszukuje tablicę z zadania 5 i wyświetla adresy komórek (bajtów), których wartości należą do zakresu <4; 7>

// 1_6.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "stdlib.h"

int main()
{
	int tab[] = { 16909060, 84281096, 151653132 };
	int b;
	for (int i = 0; i < sizeof(tab); ++i) {
		b = *((char*)tab + i);
		if (b >= 4 && b <= 7) {
			printf("Bajt: %d Wartosc: %d Adres: %p\n", i + 1, b, tab + i);
		}
	}
	system("PAUSE>nul");
	return 0;
}

Dana jest tablica typu int: {16909060, 84281096, 151653132, -1}. Zakładając, że -1 jest znacznikiem końca tablicy (nie wartością), napisz program, który policzy liczbę danych w tablicy (tutaj 3).

// 1_7.cpp : Defines the entry point for the console application.
//

int main()
{
	int tab[] = { 16909060, 84281096, 151653132, -1 };
	int i = 0;
	for(;; ++i) {
		if(tab[i] == -1) break;
	}
	printf("%d\n", i);
    return 0;
}

Dane są dane:
5.00 1.00 2.00 1.00 1.00 9.00 0.00 8.00 5.00 1.00 5.00 6.00 1.00 10.00 7.00 5.00 9.00 3.00 8.00 3.00 9.00 2.00 10.00 5.00 6.00 10.00 8.00 3.00 1.00 0.00 8.00 4.00 4.00 5.00 9.00 4.00 6.00 1.00 3.00 1.00 2.00 4.00 3.00 2.00 6.00 8.00 2.00 9.00 7.00 5.00 10.00 6.00 2.00 9.00 9.00 3.00 3.00 8.00 5.00 1.00 8.00 4.00 3.00 3.00 4.00 8.00 0.00 7.00 9.00 3.00 7.00 2.00 6.00 1.00 10.00 6.00 4.00 0.00 9.00 6.00 8.00 5.00 0.00 9.00 4.00 7.00 2.00 8.00 9.00 8.00 8.00 4.00 7.00 6.00 6.00 3.00 7.00 2.00 0.00 6.00 5.00 6.00 7.00 9.00 9.00 9.00 6.00 9.00 1.00 3.00 0.00 5.00 7.00 2.00 4.00 1.00 3.00 8.00 5.00 8.00 6.00 9.00 1.00 2.00 4.00 7.00 9.00 0.00 1.00 4.00 8.00 5.00 8.00 2.00 7.00 6.00 0.00 7.00 10.00 1.00 4.00 2.00 7.00 2.00 10.00 0.00 0.00 8.00 9.00 6.00 8.00 5.00 6.00 2.00 5.00 1.00 1.00 3.00 6.00 9.00 7.00 7.00 7.00 8.00 7.00 5.00 3.00 9.00 2.00 5.00 7.00 3.00 8.00 5.00 9.00 4.00 9.00 9.00 6.00 1.00 4.00 3.00 3.00 2.00 0.00 9.00 5.00 6.00 3.00 10.00 10.00 10.00 7.00 7.00 3.00 5.00 3.00 7.00 8.00 1.00 2.00 2.00 6.00 7.00 8.00 0.00 2.00 5.00 4.00 3.00 1.00 8.00 4.00 7.00 6.00 1.00 3.00 10.00 9.00 4.00 6.00 6.00 8.00 10.00 1.00 9.00 6.00 2.00 2.00 7.00 6.00 6.00 10.00 6.00 1.00 2.00 1.00 1.00 7.00 6.00 4.00 2.00 4.00 8.00 4.00 8.00 3.00 6.00 9.00 2.00 5.00 1.00 1.00 1.00 1.00 6.00 4.00 6.00 9.00 8.00 10.00 8.00 9.00 7.00 3.00 7.00 7.00 8.00 7.00 3.00 5.00 8.00 6.00 10.00 2.00 9.00 8.00 3.00 6.00 5.00 1.00 5.00 10.00 4.00 6.00 1.00 2.00 2.00 0.00 3.00 2.00 4.00 1.00 10.00 5.00 4.00 2.00 4.00 4.00 9.00 5.00 6.00 0.00 6.00 8.00 7.00 5.00 8.00 10.00 3.00 8.00 3.00 0.00 1.00 3.00 3.00 0.00 2.00 4.00 8.00 7.00 7.00 5.00 9.00 10.00 9.00 5.00 9.00 4.00 6.00 6.00 8.00 3.00 7.00 6.00 7.00 3.00 3.00 2.00 1.00 3.00 4.00 5.00 10.00 0.00 7.00 9.00 9.00 1.00 10.00 4.00 9.00 9.00 4.00 6.00 9.00 0.00 1.00 4.00 1.00 0.00 8.00 3.00 8.00 2.00 7.00 9.00 8.00 2.00 4.00 4.00 3.00 3.00 1.00 5.00 5.00 0.00 6.00 1.00 2.00 7.00 6.00 0.00 3.00 4.00 1.00 1.00 5.00 4.00 8.00 5.00 8.00 5.00 0.00 0.00 2.00 4.00 7.00 2.00 3.00 6.00 3.00 3.00 2.00 4.00 9.00 9.00 4.00 7.00 3.00 9.00 6.00 2.00 1.00 6.00 3.00 1.00 2.00 0.00 7.00 8.00 8.00 3.00 9.00 6.00 0.00 3.00 5.00 6.00 4.00 8.00 1.00 10.00 8.00 3.00 6.00 3.00 1.00 5.00 8.00 8.00 9.00 3.00 4.00 2.00 3.00 6.00 6.00 2.00 1.00 4.00 8.00 2.00 5.00 1.00 9.00 8.00 6.00 4.00 5.00 9.00 9.00 5.00 5.00 9.00 6.00 8.00 7.00 5.00 2.00 6.00 2.00 2.00 9.00 1.00 6.00 4.00 6.00 7.00 3.00 0.00 8.00 4.00 7.00 9.00 3.00 10.00 8.00 8.00 7.00 5.00 4.00 8.00 6.00 8.00 10.00 8.00 9.00 5.00 9.00 3.00 2.00 5.00 0.00 8.00 3.00 7.00 8.00 7.00 7.00 2.00 5.00 9.00 2.00 2.00 3.00 8.00 3.00 6.00 2.00 1.00 3.00 2.00 9.00 9.00 0.00 6.00 0.00 4.00 5.00 8.00 6.00 3.00 9.00 8.00 6.00 9.00 4.00 3.00 6.00 1.00 4.00 2.00 8.00 7.00 7.00 9.00 8.00 5.00 0.00 1.00 5.00 10.00 8.00 9.00 10.00 4.00 3.00 8.00 2.00 10.00 9.00 4.00 3.00 7.00 7.00 8.00 6.00 1.00 6.00 0.00 8.00 7.00 6.00 2.00 7.00 7.00 3.00 0.00 8.00 8.00 5.00 7.00 8.00 3.00 9.00 6.00 3.00 3.00 9.00 4.00 2.00 9.00 7.00 10.00 2.00 8.00 5.00 6.00 0.00 6.00 6.00 5.00 1.00 5.00 1.00 8.00 6.00 7.00 6.00 6.00 10.00 2.00 5.00 8.00 5.00 8.00 2.00 7.00 9.00 2.00 4.00 0.00 2.00 7.00 9.00 3.00 0.00 9.00 5.00 9.00 3.00 7.00 0.00 5.00 3.00 3.00 10.00 8.00 3.00 6.00 4.00 6.00 10.00 6.00 2.00 8.00 7.00 1.00 2.00 3.00 4.00 5.00 3.00 8.00 8.00 3.00 6.00 1.00 7.00 3.00 7.00 3.00 7.00 4.00 4.00 2.00 7.00 8.00 9.00 5.00 2.00 6.00 2.00 4.00 9.00 4.00 9.00 4.00 7.00 6.00 1.00 4.00 9.00 1.00 4.00 2.00 2.00 4.00 9.00 5.00 8.00 4.00 5.00 10.00 1.00 1.00 7.00 9.00 1.00 7.00 1.00 7.00 6.00 0.00 8.00 10.00 4.00 3.00 0.00 2.00 6.00 6.00 3.00 7.00 1.00 9.00 1.00 3.00 7.00 5.00 5.00 4.00 8.00 3.00 6.00 9.00 3.00 8.00 8.00 1.00 2.00 4.00 7.00 7.00 7.00 0.00 1.00 8.00 8.00 7.00 9.00 9.00 2.00 5.00 8.00 5.00 6.00 6.00 7.00 1.00 5.00 2.00 3.00 6.00 7.00 4.00 5.00 1.00 2.00 3.00 4.00 2.00 3.00 9.00 6.00 9.00 6.00 3.00 1.00 5.00 4.00 7.00 8.00 4.00 6.00 2.00 9.00 5.00 3.00 2.00 10.00 7.00 7.00 7.00 8.00 6.00 5.00 9.00 4.00 2.00 3.00 9.00 7.00 9.00 4.00 6.00 0.00 9.00 5.00 5.00 8.00 3.00 6.00 3.00 3.00 6.00 4.00 1.00 2.00 10.00 7.00 7.00 3.00 0.00 6.00 0.00 3.00 2.00 4.00 8.00 6.00 3.00 3.00 1.00 2.00 7.00 1.00 9.00 4.00 1.00 6.00 8.00 3.00 8.00 7.00 6.00 4.00 4.00 4.00 4.00 2.00 5.00 0.00 6.00 0.00 9.00 9.00 3.00 10.00 10.00 10.00 2.00 0.00 2.00 3.00 2.00 8.00 2.00 4.00 3.00 3.00 9.00 0.00 1.00 4.00 8.00 2.00 9.00 10.00 4.00 10.00 1.00 8.00 6.00 6.00 5.00 2.00 1.00 6.00 8.00 7.00 5.00 9.00 6.00 2.00 7.00 3.00 7.00 10.00 3.00 9.00 7.00 1.00 2.00 9.00 5.00 9.00 8.00 0.00 8.00 7.00 9.00 6.00 6.00 1.00 2.00 0.00 4.00 3.00 3.00 5.00 2.00 9.00 9.00 6.00 0.00 9.00 7.00 1.00 10.00 3.00 8.00 5.00 6.00 5.00 6.00 2.00 6.00 2.00 4.00 5.00 5.00 8.00 10.00 10.00 7.00 2.00 0.00 2.00 6.00 6.00 4.00 6.00 9.00 3.00 3.00 1.00 5.00 8.00 3.00 8.00 4.00 6.00 10.00 7.00 10.00 1.00 9.00 1.00 1.00 6.00 4.00 3.00 8.00 3.00 6.00 5.00 3.00 8.00 6.00 1.00 3.00 2.00 6.00 2.00 5.00 7.00 10.00 8.00 1.00 9.00 10.00 6.00 10.00 3.00 9.00 0.00 5.00 1.00 3.00 2.00 6.00 7.00 3.00 1.00 0.00 1.00 1.00 0.00
Wyznacz ich histogram, zakładając 11 przedziałów: <0;1), <1;2), ... <10; 11)
Wynik wyświetl.
Podpowiedź: Wikipedia - histogram.

// 1_8.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "stdlib.h"
int main()
{
	float numbers[] = { 5.00,1.00,2.00,1.00,1.00,9.00,0.00,8.00,5.00,1.00,5.00,6.00,1.00,10.00,7.00,5.00,9.00,3.00,8.00,3.00,9.00,2.00,10.00,5.00,6.00,10.00,8.00,3.00,1.00,0.00,8.00,4.00,4.00,5.00,9.00,4.00,6.00,1.00,3.00,1.00,2.00,4.00,3.00,2.00,6.00,8.00,2.00,9.00,7.00,5.00,10.00,6.00,2.00,9.00,9.00,3.00,3.00,8.00,5.00,1.00,8.00,4.00,3.00,3.00,4.00,8.00,0.00,7.00,9.00,3.00,7.00,2.00,6.00,1.00,10.00,6.00,4.00,0.00,9.00,6.00,8.00,5.00,0.00,9.00,4.00,7.00,2.00,8.00,9.00,8.00,8.00,4.00,7.00,6.00,6.00,3.00,7.00,2.00,0.00,6.00,5.00,6.00,7.00,9.00,9.00,9.00,6.00,9.00,1.00,3.00,0.00,5.00,7.00,2.00,4.00,1.00,3.00,8.00,5.00,8.00,6.00,9.00,1.00,2.00,4.00,7.00,9.00,0.00,1.00,4.00,8.00,5.00,8.00,2.00,7.00,6.00,0.00,7.00,10.00,1.00,4.00,2.00,7.00,2.00,10.00,0.00,0.00,8.00,9.00,6.00,8.00,5.00,6.00,2.00,5.00,1.00,1.00,3.00,6.00,9.00,7.00,7.00,7.00,8.00,7.00,5.00,3.00,9.00,2.00,5.00,7.00,3.00,8.00,5.00,9.00,4.00,9.00,9.00,6.00,1.00,4.00,3.00,3.00,2.00,0.00,9.00,5.00,6.00,3.00,10.00,10.00,10.00,7.00,7.00,3.00,5.00,3.00,7.00,8.00,1.00,2.00,2.00,6.00,7.00,8.00,0.00,2.00,5.00,4.00,3.00,1.00,8.00,4.00,7.00,6.00,1.00,3.00,10.00,9.00,4.00,6.00,6.00,8.00,10.00,1.00,9.00,6.00,2.00,2.00,7.00,6.00,6.00,10.00,6.00,1.00,2.00,1.00,1.00,7.00,6.00,4.00,2.00,4.00,8.00,4.00,8.00,3.00,6.00,9.00,2.00,5.00,1.00,1.00,1.00,1.00,6.00,4.00,6.00,9.00,8.00,10.00,8.00,9.00,7.00,3.00,7.00,7.00,8.00,7.00,3.00,5.00,8.00,6.00,10.00,2.00,9.00,8.00,3.00,6.00,5.00,1.00,5.00,10.00,4.00,6.00,1.00,2.00,2.00,0.00,3.00,2.00,4.00,1.00,10.00,5.00,4.00,2.00,4.00,4.00,9.00,5.00,6.00,0.00,6.00,8.00,7.00,5.00,8.00,10.00,3.00,8.00,3.00,0.00,1.00,3.00,3.00,0.00,2.00,4.00,8.00,7.00,7.00,5.00,9.00,10.00,9.00,5.00,9.00,4.00,6.00,6.00,8.00,3.00,7.00,6.00,7.00,3.00,3.00,2.00,1.00,3.00,4.00,5.00,10.00,0.00,7.00,9.00,9.00,1.00,10.00,4.00,9.00,9.00,4.00,6.00,9.00,0.00,1.00,4.00,1.00,0.00,8.00,3.00,8.00,2.00,7.00,9.00,8.00,2.00,4.00,4.00,3.00,3.00,1.00,5.00,5.00,0.00,6.00,1.00,2.00,7.00,6.00,0.00,3.00,4.00,1.00,1.00,5.00,4.00,8.00,5.00,8.00,5.00,0.00,0.00,2.00,4.00,7.00,2.00,3.00,6.00,3.00,3.00,2.00,4.00,9.00,9.00,4.00,7.00,3.00,9.00,6.00,2.00,1.00,6.00,3.00,1.00,2.00,0.00,7.00,8.00,8.00,3.00,9.00,6.00,0.00,3.00,5.00,6.00,4.00,8.00,1.00,10.00,8.00,3.00,6.00,3.00,1.00,5.00,8.00,8.00,9.00,3.00,4.00,2.00,3.00,6.00,6.00,2.00,1.00,4.00,8.00,2.00,5.00,1.00,9.00,8.00,6.00,4.00,5.00,9.00,9.00,5.00,5.00,9.00,6.00,8.00,7.00,5.00,2.00,6.00,2.00,2.00,9.00,1.00,6.00,4.00,6.00,7.00,3.00,0.00,8.00,4.00,7.00,9.00,3.00,10.00,8.00,8.00,7.00,5.00,4.00,8.00,6.00,8.00,10.00,8.00,9.00,5.00,9.00,3.00,2.00,5.00,0.00,8.00,3.00,7.00,8.00,7.00,7.00,2.00,5.00,9.00,2.00,2.00,3.00,8.00,3.00,6.00,2.00,1.00,3.00,2.00,9.00,9.00,0.00,6.00,0.00,4.00,5.00,8.00,6.00,3.00,9.00,8.00,6.00,9.00,4.00,3.00,6.00,1.00,4.00,2.00,8.00,7.00,7.00,9.00,8.00,5.00,0.00,1.00,5.00,10.00,8.00,9.00,10.00,4.00,3.00,8.00,2.00,10.00,9.00,4.00,3.00,7.00,7.00,8.00,6.00,1.00,6.00,0.00,8.00,7.00,6.00,2.00,7.00,7.00,3.00,0.00,8.00,8.00,5.00,7.00,8.00,3.00,9.00,6.00,3.00,3.00,9.00,4.00,2.00,9.00,7.00,10.00,2.00,8.00,5.00,6.00,0.00,6.00,6.00,5.00,1.00,5.00,1.00,8.00,6.00,7.00,6.00,6.00,10.00,2.00,5.00,8.00,5.00,8.00,2.00,7.00,9.00,2.00,4.00,0.00,2.00,7.00,9.00,3.00,0.00,9.00,5.00,9.00,3.00,7.00,0.00,5.00,3.00,3.00,10.00,8.00,3.00,6.00,4.00,6.00,10.00,6.00,2.00,8.00,7.00,1.00,2.00,3.00,4.00,5.00,3.00,8.00,8.00,3.00,6.00,1.00,7.00,3.00,7.00,3.00,7.00,4.00,4.00,2.00,7.00,8.00,9.00,5.00,2.00,6.00,2.00,4.00,9.00,4.00,9.00,4.00,7.00,6.00,1.00,4.00,9.00,1.00,4.00,2.00,2.00,4.00,9.00,5.00,8.00,4.00,5.00,10.00,1.00,1.00,7.00,9.00,1.00,7.00,1.00,7.00,6.00,0.00,8.00,10.00,4.00,3.00,0.00,2.00,6.00,6.00,3.00,7.00,1.00,9.00,1.00,3.00,7.00,5.00,5.00,4.00,8.00,3.00,6.00,9.00,3.00,8.00,8.00,1.00,2.00,4.00,7.00,7.00,7.00,0.00,1.00,8.00,8.00,7.00,9.00,9.00,2.00,5.00,8.00,5.00,6.00,6.00,7.00,1.00,5.00,2.00,3.00,6.00,7.00,4.00,5.00,1.00,2.00,3.00,4.00,2.00,3.00,9.00,6.00,9.00,6.00,3.00,1.00,5.00,4.00,7.00,8.00,4.00,6.00,2.00,9.00,5.00,3.00,2.00,10.00,7.00,7.00,7.00,8.00,6.00,5.00,9.00,4.00,2.00,3.00,9.00,7.00,9.00,4.00,6.00,0.00,9.00,5.00,5.00,8.00,3.00,6.00,3.00,3.00,6.00,4.00,1.00,2.00,10.00,7.00,7.00,3.00,0.00,6.00,0.00,3.00,2.00,4.00,8.00,6.00,3.00,3.00,1.00,2.00,7.00,1.00,9.00,4.00,1.00,6.00,8.00,3.00,8.00,7.00,6.00,4.00,4.00,4.00,4.00,2.00,5.00,0.00,6.00,0.00,9.00,9.00,3.00,10.00,10.00,10.00,2.00,0.00,2.00,3.00,2.00,8.00,2.00,4.00,3.00,3.00,9.00,0.00,1.00,4.00,8.00,2.00,9.00,10.00,4.00,10.00,1.00,8.00,6.00,6.00,5.00,2.00,1.00,6.00,8.00,7.00,5.00,9.00,6.00,2.00,7.00,3.00,7.00,10.00,3.00,9.00,7.00,1.00,2.00,9.00,5.00,9.00,8.00,0.00,8.00,7.00,9.00,6.00,6.00,1.00,2.00,0.00,4.00,3.00,3.00,5.00,2.00,9.00,9.00,6.00,0.00,9.00,7.00,1.00,10.00,3.00,8.00,5.00,6.00,5.00,6.00,2.00,6.00,2.00,4.00,5.00,5.00,8.00,10.00,10.00,7.00,2.00,0.00,2.00,6.00,6.00,4.00,6.00,9.00,3.00,3.00,1.00,5.00,8.00,3.00,8.00,4.00,6.00,10.00,7.00,10.00,1.00,9.00,1.00,1.00,6.00,4.00,3.00,8.00,3.00,6.00,5.00,3.00,8.00,6.00,1.00,3.00,2.00,6.00,2.00,5.00,7.00,10.00,8.00,1.00,9.00,10.00,6.00,10.00,3.00,9.00,0.00,5.00,1.00,3.00,2.00,6.00,7.00,3.00,1.00,0.00,1.00,1.00,0.00 };
	int count[11] = {};
	int i = 0;
	for (; i < sizeof(numbers) / sizeof(float); ++i) {
		++count[(int)numbers[i]];
	}
	for (i = 0; i < 11; ++i) {
		printf("%d ", i + 1);
		for (int j = 0; j < count[i] - 7; ++j) {
			if (j == (count[i] - 8)) {
				if ((count[i] - 8) % 2) {
					printf("istogram"); break;
				}
				else {
					printf("stogram"); break;
				}
					
			}
			if (j % 2) printf("i"); else printf("h");
		}
		printf("\n");
	}
	system("PAUSE>null");
	return 0;
}